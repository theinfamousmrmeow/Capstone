{"remainingRequest":"C:\\Capstone\\flaskProject\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Capstone\\flaskProject\\client\\src\\components\\Chart2.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Capstone\\flaskProject\\client\\src\\components\\Chart2.vue","mtime":1642558446955},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBWdWVBcGV4Q2hhcnRzIGZyb20gJ3Z1ZS1hcGV4Y2hhcnRzJzsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKCmNvbnN0IFdFQkFQUF9BRERSRVNTID0gcHJvY2Vzcy5lbnYuVlVFX0FQUF9XRUJBUFBfSVA7CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0NoYXJ0MicsCiAgY29tcG9uZW50czogewogICAgYXBleGNoYXJ0czogVnVlQXBleENoYXJ0cywKICB9LAogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0YXJnZXRUaW1lOiA2MCwKICAgICAgbWF4VmFsdWU6IDEwLAogICAgICBicmFpbnM6IFswXSwKICAgICAgc2VyaWVzOiBbewogICAgICAgIG5hbWU6ICdURUFNIDEnLAogICAgICAgIGRhdGE6IHRoaXMuZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhuZXcgRGF0ZSgnMTEgRmViIDIwMTcgR01UJykuZ2V0VGltZSgpLCAyMCwgewogICAgICAgICAgbWluOiAxMCwKICAgICAgICAgIG1heDogNjAsCiAgICAgICAgfSksCiAgICAgIH0sCiAgICAgIHsKICAgICAgICBuYW1lOiAnVEVBTSAyJywKICAgICAgICBkYXRhOiB0aGlzLmdlbmVyYXRlRGF5V2lzZVRpbWVTZXJpZXMobmV3IERhdGUoJzExIEZlYiAyMDE3IEdNVCcpLmdldFRpbWUoKSwgMjAsIHsKICAgICAgICAgIG1pbjogMTAsCiAgICAgICAgICBtYXg6IDYwLAogICAgICAgIH0pLAogICAgICB9LAogICAgICBdLAogICAgICBjaGFydE9wdGlvbnM6IHsKICAgICAgICBjaGFydDogewogICAgICAgICAgaGVpZ2h0OiA0MDAsCiAgICAgICAgICB0eXBlOiAnc2NhdHRlcicsCiAgICAgICAgICB6b29tOiB7CiAgICAgICAgICAgIHR5cGU6ICd4eScsCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgZGF0YUxhYmVsczogewogICAgICAgICAgZW5hYmxlZDogZmFsc2UsCiAgICAgICAgfSwKICAgICAgICBncmlkOiB7CiAgICAgICAgICB4YXhpczogewogICAgICAgICAgICBsaW5lczogewogICAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgeWF4aXM6IHsKICAgICAgICAgICAgbGluZXM6IHsKICAgICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICAgIHhheGlzOiB7CiAgICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnLAogICAgICAgIH0sCiAgICAgICAgeWF4aXM6IHsKICAgICAgICAgIG1heDogMTAwLAogICAgICAgIH0sCiAgICAgIH0sCiAgICB9OwogIH0sCgogIGNvbXB1dGVkOiB7CgogIH0sCgogIG1ldGhvZHM6IHsKCiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMKICAgIGNvbnZlcnRCcmFpbnNUb1NlcmllcygpIHsKICAgICAgY29uc3Qgc2VyaWVzID0gW107CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyxuby1yZXR1cm4tYXNzaWduCiAgICAgIHRoaXMuYnJhaW5zLmZvckVhY2goKGVsZW1lbnQpID0+IHsKICAgICAgICBjb25zdCB4ID0gZWxlbWVudFswXTsKICAgICAgICBjb25zdCB5ID0gZWxlbWVudFsyXTsKICAgICAgICBpZiAoeSA+IHRoaXMubWF4VmFsdWUpIHsKICAgICAgICAgIHRoaXMubWF4VmFsdWUgPSB5OwogICAgICAgIH0KICAgICAgICBzZXJpZXMucHVzaChbeCwgeV0pOwogICAgICB9KTsKICAgICAgcmV0dXJuIHNlcmllczsKICAgIH0sCgogICAgZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhiYXNldmFsLCBjb3VudCwgeXJhbmdlKSB7CiAgICAgIGxldCBpID0gMDsKICAgICAgY29uc3Qgc2VyaWVzID0gW107CiAgICAgIHdoaWxlIChpIDwgY291bnQpIHsKICAgICAgICBjb25zdCB4ID0gYmFzZXZhbDsKICAgICAgICBjb25zdCB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHlyYW5nZS5tYXggLSB5cmFuZ2UubWluICsgMSkpICsgeXJhbmdlLm1pbjsKICAgICAgICAvLyBUaGVzZSBhcmUgdGltZSBhbmQgdmFsdWUKICAgICAgICBzZXJpZXMucHVzaChbeCwgeV0pOwogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnbgogICAgICAgIGJhc2V2YWwgKz0gODY0MDAwMDA7CiAgICAgICAgaSArPSAxOwogICAgICB9CiAgICAgIHJldHVybiBzZXJpZXM7CiAgICB9LAogICAgZ2V0U2Vzc2lvbnMoKSB7CiAgICAgIGNvbnN0IHBhdGggPSBgJHtXRUJBUFBfQUREUkVTU30vc2Vzc2lvbnNgOwogICAgICBheGlvcy5nZXQocGF0aCkKICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAvLyB0aGlzLmJyYWlucyA9IHJlcy5kYXRhOwogICAgICAgICAgdGhpcy5icmFpbnMgPSByZXMuZGF0YTsKICAgICAgICAgIGNvbnNvbGUubG9nKCdCUkFJTlMnLCBKU09OLnN0cmluZ2lmeSh0aGlzLmJyYWlucykpOwogICAgICAgICAgY29uc29sZS5sb2coJ0JSQUlOIDA6ICcsIHRoaXMuYnJhaW5zWzBdKTsKICAgICAgICAgIHRoaXMudXBkYXRlQ2hhcnQoKTsKICAgICAgICAgIC8vIFVwZGF0ZSBDaGFydD8KICAgICAgICB9KQogICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZQogICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7CiAgICAgICAgfSk7CiAgICB9LAoKICAgIHVwZGF0ZUNoYXJ0KCkgewogICAgICAvLyBjb25zdCBtYXggPSA5MDsKICAgICAgLy8gY29uc3QgbWluID0gMjA7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuCiAgICAgIC8vIGNvbnN0IG5ld0RhdGEgPSB0aGlzLnNlcmllc1swXS5kYXRhLm1hcCgoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluKQogICAgICB0aGlzLnNlcmllcyA9IFsKICAgICAgICB7CiAgICAgICAgICBuYW1lOiAnU2Vzc2lvbiBMZW5ndGggKE1TKScsCiAgICAgICAgICBkYXRhOiB0aGlzLmNvbnZlcnRCcmFpbnNUb1NlcmllcygpLAogICAgICAgIH0sCiAgICAgIF07CiAgICAgIHRoaXMuY2hhcnRPcHRpb25zID0gewogICAgICAgIHRpdGxlOiB7CiAgICAgICAgICB0ZXh0OiAnU2Vzc2lvbiBMZW5ndGggT3ZlciBUaW1lJywKICAgICAgICB9LAogICAgICAgIGNoYXJ0OiB7CiAgICAgICAgICBoZWlnaHQ6IDQwMCwKICAgICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICAgIHpvb206IHsKICAgICAgICAgICAgdHlwZTogJ3h5JywKICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgICAgICBhbm5vdGF0aW9uczogewogICAgICAgICAgeWF4aXM6IFt7CiAgICAgICAgICAgIHk6IHRoaXMudGFyZ2V0VGltZSAqIDEwMDAsCiAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnIzAwRTM5NicsCiAgICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjMDBFMzk2JywKICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgY29sb3I6ICcjZmZmJywKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjMDBFMzk2JywKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIHRleHQ6IGBUYXJnZXQ6JHt0aGlzLnRhcmdldFRpbWV9c2AsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgICAgXSwKICAgICAgICB9LAogICAgICAgIGRhdGFMYWJlbHM6IHsKICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLAogICAgICAgIH0sCiAgICAgICAgZ3JpZDogewogICAgICAgICAgeGF4aXM6IHsKICAgICAgICAgICAgbGluZXM6IHsKICAgICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIHlheGlzOiB7CiAgICAgICAgICAgIGxpbmVzOiB7CiAgICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgICAgICB4YXhpczogewogICAgICAgICAgdHlwZTogJ2RhdGV0aW1lJywKICAgICAgICB9LAogICAgICAgIHlheGlzOiB7CiAgICAgICAgICBtYXg6IHRoaXMubWF4VmFsdWUgKyAxLAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIC8vIFRPRE86IEZpbmQgYSBwcmV0dGllciB3YXkgdG8gZG8gdGhpcy4KICAgICAgY29uc3QgY2xvbmVTZXJpZXMgPSBbXTsKICAgICAgT2JqZWN0LmFzc2lnbihjbG9uZVNlcmllcywgdGhpcy5zZXJpZXMpOwogICAgICB0aGlzLnNlcmllcyA9IGNsb25lU2VyaWVzOwogICAgfSwKICB9LAogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmdldFNlc3Npb25zKCk7CiAgfSwKfTsK"},{"version":3,"sources":["Chart2.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chart2.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"app\">\n     <apexcharts width=\"800\" type='line' :options=\"chartOptions\" :series=\"series\"></apexcharts>\n    <div>\n      <button @click=\"updateChart\">Update!</button>\n  </div>\n  </div>\n\n</template>\n\n<script>\nimport VueApexCharts from 'vue-apexcharts';\nimport axios from 'axios';\n\nconst WEBAPP_ADDRESS = process.env.VUE_APP_WEBAPP_IP;\n\nexport default {\n  name: 'Chart2',\n  components: {\n    apexcharts: VueApexCharts,\n  },\n  data() {\n    return {\n      targetTime: 60,\n      maxValue: 10,\n      brains: [0],\n      series: [{\n        name: 'TEAM 1',\n        data: this.generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n          min: 10,\n          max: 60,\n        }),\n      },\n      {\n        name: 'TEAM 2',\n        data: this.generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n          min: 10,\n          max: 60,\n        }),\n      },\n      ],\n      chartOptions: {\n        chart: {\n          height: 400,\n          type: 'scatter',\n          zoom: {\n            type: 'xy',\n          },\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        grid: {\n          xaxis: {\n            lines: {\n              show: true,\n            },\n          },\n          yaxis: {\n            lines: {\n              show: true,\n            },\n          },\n        },\n        xaxis: {\n          type: 'datetime',\n        },\n        yaxis: {\n          max: 100,\n        },\n      },\n    };\n  },\n\n  computed: {\n\n  },\n\n  methods: {\n\n    // eslint-disable-next-line no-unused-vars\n    convertBrainsToSeries() {\n      const series = [];\n      // eslint-disable-next-line no-unused-vars,no-return-assign\n      this.brains.forEach((element) => {\n        const x = element[0];\n        const y = element[2];\n        if (y > this.maxValue) {\n          this.maxValue = y;\n        }\n        series.push([x, y]);\n      });\n      return series;\n    },\n\n    generateDayWiseTimeSeries(baseval, count, yrange) {\n      let i = 0;\n      const series = [];\n      while (i < count) {\n        const x = baseval;\n        const y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n        // These are time and value\n        series.push([x, y]);\n        // eslint-disable-next-line no-param-reassign\n        baseval += 86400000;\n        i += 1;\n      }\n      return series;\n    },\n    getSessions() {\n      const path = `${WEBAPP_ADDRESS}/sessions`;\n      axios.get(path)\n        .then((res) => {\n          // this.brains = res.data;\n          this.brains = res.data;\n          console.log('BRAINS', JSON.stringify(this.brains));\n          console.log('BRAIN 0: ', this.brains[0]);\n          this.updateChart();\n          // Update Chart?\n        })\n        .catch((error) => {\n          // eslint-disable-next-line\n          console.error(error);\n        });\n    },\n\n    updateChart() {\n      // const max = 90;\n      // const min = 20;\n      // eslint-disable-next-line max-len\n      // const newData = this.series[0].data.map(() => Math.floor(Math.random() * (max - min + 1)) + min)\n      this.series = [\n        {\n          name: 'Session Length (MS)',\n          data: this.convertBrainsToSeries(),\n        },\n      ];\n      this.chartOptions = {\n        title: {\n          text: 'Session Length Over Time',\n        },\n        chart: {\n          height: 400,\n          type: 'line',\n          zoom: {\n            type: 'xy',\n          },\n        },\n        annotations: {\n          yaxis: [{\n            y: this.targetTime * 1000,\n            borderColor: '#00E396',\n            label: {\n              borderColor: '#00E396',\n              style: {\n                color: '#fff',\n                background: '#00E396',\n              },\n              text: `Target:${this.targetTime}s`,\n            },\n          },\n          ],\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        grid: {\n          xaxis: {\n            lines: {\n              show: true,\n            },\n          },\n          yaxis: {\n            lines: {\n              show: true,\n            },\n          },\n        },\n        xaxis: {\n          type: 'datetime',\n        },\n        yaxis: {\n          max: this.maxValue + 1,\n        },\n      };\n      // TODO: Find a prettier way to do this.\n      const cloneSeries = [];\n      Object.assign(cloneSeries, this.series);\n      this.series = cloneSeries;\n    },\n  },\n  created() {\n    this.getSessions();\n  },\n};\n</script>\n<style scoped>\n  button {\n    background: #26E6A4;\n    border: 0;\n    font-size: 16px;\n    padding: 10px;\n    margin-left: 28px;\n  }\n</style>\n"]}]}