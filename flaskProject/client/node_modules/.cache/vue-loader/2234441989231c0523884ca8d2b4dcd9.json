{"remainingRequest":"C:\\Capstone\\flaskProject\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Capstone\\flaskProject\\client\\src\\components\\Chart2.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Capstone\\flaskProject\\client\\src\\components\\Chart2.vue","mtime":1640549897900},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBWdWVBcGV4Q2hhcnRzIGZyb20gJ3Z1ZS1hcGV4Y2hhcnRzJzsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQ2hhcnQnLAogIGNvbXBvbmVudHM6IHsKICAgIGFwZXhjaGFydHM6IFZ1ZUFwZXhDaGFydHMsCiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdGFyZ2V0VGltZTogNjAsCiAgICAgIG1heFZhbHVlOiAxMCwKICAgICAgYnJhaW5zOiBbMF0sCiAgICAgIHNlcmllczogW3sKICAgICAgICBuYW1lOiAnVEVBTSAxJywKICAgICAgICBkYXRhOiB0aGlzLmdlbmVyYXRlRGF5V2lzZVRpbWVTZXJpZXMobmV3IERhdGUoJzExIEZlYiAyMDE3IEdNVCcpLmdldFRpbWUoKSwgMjAsIHsKICAgICAgICAgIG1pbjogMTAsCiAgICAgICAgICBtYXg6IDYwLAogICAgICAgIH0pLAogICAgICB9LAogICAgICB7CiAgICAgICAgbmFtZTogJ1RFQU0gMicsCiAgICAgICAgZGF0YTogdGhpcy5nZW5lcmF0ZURheVdpc2VUaW1lU2VyaWVzKG5ldyBEYXRlKCcxMSBGZWIgMjAxNyBHTVQnKS5nZXRUaW1lKCksIDIwLCB7CiAgICAgICAgICBtaW46IDEwLAogICAgICAgICAgbWF4OiA2MCwKICAgICAgICB9KSwKICAgICAgfSwKICAgICAgXSwKICAgICAgY2hhcnRPcHRpb25zOiB7CiAgICAgICAgY2hhcnQ6IHsKICAgICAgICAgIGhlaWdodDogNDAwLAogICAgICAgICAgdHlwZTogJ3NjYXR0ZXInLAogICAgICAgICAgem9vbTogewogICAgICAgICAgICB0eXBlOiAneHknLAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICAgIGRhdGFMYWJlbHM6IHsKICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLAogICAgICAgIH0sCiAgICAgICAgZ3JpZDogewogICAgICAgICAgeGF4aXM6IHsKICAgICAgICAgICAgbGluZXM6IHsKICAgICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICB9LAogICAgICAgICAgfSwKICAgICAgICAgIHlheGlzOiB7CiAgICAgICAgICAgIGxpbmVzOiB7CiAgICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgfSwKICAgICAgICB4YXhpczogewogICAgICAgICAgdHlwZTogJ2RhdGV0aW1lJywKICAgICAgICB9LAogICAgICAgIHlheGlzOiB7CiAgICAgICAgICBtYXg6IDEwMCwKICAgICAgICB9LAogICAgICB9LAogICAgfTsKICB9LAoKICBjb21wdXRlZDogewoKICB9LAoKICBtZXRob2RzOiB7CgogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzCiAgICBjb252ZXJ0QnJhaW5zVG9TZXJpZXMoKSB7CiAgICAgIGNvbnN0IHNlcmllcyA9IFtdOwogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsbm8tcmV0dXJuLWFzc2lnbgogICAgICB0aGlzLmJyYWlucy5mb3JFYWNoKChlbGVtZW50KSA9PiB7CiAgICAgICAgY29uc3QgeCA9IGVsZW1lbnRbMF07CiAgICAgICAgY29uc3QgeSA9IGVsZW1lbnRbMl07CiAgICAgICAgaWYgKHkgPiB0aGlzLm1heFZhbHVlKSB7CiAgICAgICAgICB0aGlzLm1heFZhbHVlID0geTsKICAgICAgICB9CiAgICAgICAgc2VyaWVzLnB1c2goW3gsIHldKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBzZXJpZXM7CiAgICB9LAoKICAgIGdlbmVyYXRlRGF5V2lzZVRpbWVTZXJpZXMoYmFzZXZhbCwgY291bnQsIHlyYW5nZSkgewogICAgICBsZXQgaSA9IDA7CiAgICAgIGNvbnN0IHNlcmllcyA9IFtdOwogICAgICB3aGlsZSAoaSA8IGNvdW50KSB7CiAgICAgICAgY29uc3QgeCA9IGJhc2V2YWw7CiAgICAgICAgY29uc3QgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICh5cmFuZ2UubWF4IC0geXJhbmdlLm1pbiArIDEpKSArIHlyYW5nZS5taW47CiAgICAgICAgLy8gVGhlc2UgYXJlIHRpbWUgYW5kIHZhbHVlCiAgICAgICAgc2VyaWVzLnB1c2goW3gsIHldKTsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ24KICAgICAgICBiYXNldmFsICs9IDg2NDAwMDAwOwogICAgICAgIGkgKz0gMTsKICAgICAgfQogICAgICByZXR1cm4gc2VyaWVzOwogICAgfSwKICAgIGdldFNlc3Npb25zKCkgewogICAgICBjb25zdCBwYXRoID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6NTAwMC9zZXNzaW9ucyc7CiAgICAgIGF4aW9zLmdldChwYXRoKQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgIC8vIHRoaXMuYnJhaW5zID0gcmVzLmRhdGE7CiAgICAgICAgICB0aGlzLmJyYWlucyA9IHJlcy5kYXRhOwogICAgICAgICAgY29uc29sZS5sb2coJ0JSQUlOUycsIEpTT04uc3RyaW5naWZ5KHRoaXMuYnJhaW5zKSk7CiAgICAgICAgICBjb25zb2xlLmxvZygnQlJBSU4gMDogJywgdGhpcy5icmFpbnNbMF0pOwogICAgICAgICAgdGhpcy51cGRhdGVDaGFydCgpOwogICAgICAgICAgLy8gVXBkYXRlIENoYXJ0PwogICAgICAgIH0pCiAgICAgICAgLmNhdGNoKChlcnJvcikgPT4gewogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lCiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsKICAgICAgICB9KTsKICAgIH0sCgogICAgdXBkYXRlQ2hhcnQoKSB7CiAgICAgIC8vIGNvbnN0IG1heCA9IDkwOwogICAgICAvLyBjb25zdCBtaW4gPSAyMDsKICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1sZW4KICAgICAgLy8gY29uc3QgbmV3RGF0YSA9IHRoaXMuc2VyaWVzWzBdLmRhdGEubWFwKCgpID0+IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW4pCiAgICAgIHRoaXMuc2VyaWVzID0gWwogICAgICAgIHsKICAgICAgICAgIG5hbWU6ICdTZXNzaW9uIExlbmd0aCAoTVMpJywKICAgICAgICAgIGRhdGE6IHRoaXMuY29udmVydEJyYWluc1RvU2VyaWVzKCksCiAgICAgICAgfSwKICAgICAgXTsKICAgICAgdGhpcy5jaGFydE9wdGlvbnMgPSB7CiAgICAgICAgY2hhcnQ6IHsKICAgICAgICAgIGhlaWdodDogNDAwLAogICAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgICAgem9vbTogewogICAgICAgICAgICB0eXBlOiAneHknLAogICAgICAgICAgfSwKICAgICAgICB9LAogICAgICAgIGFubm90YXRpb25zOiB7CiAgICAgICAgICB5YXhpczogW3sKICAgICAgICAgICAgeTogdGhpcy50YXJnZXRUaW1lICogMTAwMCwKICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjMDBFMzk2JywKICAgICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJyMwMEUzOTYnLAogICAgICAgICAgICAgIHN0eWxlOiB7CiAgICAgICAgICAgICAgICBjb2xvcjogJyNmZmYnLAogICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJyMwMEUzOTYnLAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgdGV4dDogYFRhcmdldDoke3RoaXMudGFyZ2V0VGltZX1zYCwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICBdLAogICAgICAgIH0sCiAgICAgICAgZGF0YUxhYmVsczogewogICAgICAgICAgZW5hYmxlZDogdHJ1ZSwKICAgICAgICB9LAogICAgICAgIGdyaWQ6IHsKICAgICAgICAgIHhheGlzOiB7CiAgICAgICAgICAgIGxpbmVzOiB7CiAgICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgfSwKICAgICAgICAgIH0sCiAgICAgICAgICB5YXhpczogewogICAgICAgICAgICBsaW5lczogewogICAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIH0sCiAgICAgICAgICB9LAogICAgICAgIH0sCiAgICAgICAgeGF4aXM6IHsKICAgICAgICAgIHR5cGU6ICdkYXRldGltZScsCiAgICAgICAgfSwKICAgICAgICB5YXhpczogewogICAgICAgICAgbWF4OiB0aGlzLm1heFZhbHVlICsgMSwKICAgICAgICB9LAogICAgICB9OwogICAgfSwKICB9LAogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLmdldFNlc3Npb25zKCk7CiAgfSwKfTsK"},{"version":3,"sources":["Chart2.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chart2.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"app\">\n     <apexcharts width=\"800\" type=\"line\" :options=\"chartOptions\" :series=\"series\"></apexcharts>\n    <div>\n      <button @click=\"updateChart\">Update!</button>\n  </div>\n  </div>\n\n</template>\n\n<script>\nimport VueApexCharts from 'vue-apexcharts';\nimport axios from 'axios';\n\nexport default {\n  name: 'Chart',\n  components: {\n    apexcharts: VueApexCharts,\n  },\n  data() {\n    return {\n      targetTime: 60,\n      maxValue: 10,\n      brains: [0],\n      series: [{\n        name: 'TEAM 1',\n        data: this.generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n          min: 10,\n          max: 60,\n        }),\n      },\n      {\n        name: 'TEAM 2',\n        data: this.generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n          min: 10,\n          max: 60,\n        }),\n      },\n      ],\n      chartOptions: {\n        chart: {\n          height: 400,\n          type: 'scatter',\n          zoom: {\n            type: 'xy',\n          },\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        grid: {\n          xaxis: {\n            lines: {\n              show: true,\n            },\n          },\n          yaxis: {\n            lines: {\n              show: true,\n            },\n          },\n        },\n        xaxis: {\n          type: 'datetime',\n        },\n        yaxis: {\n          max: 100,\n        },\n      },\n    };\n  },\n\n  computed: {\n\n  },\n\n  methods: {\n\n    // eslint-disable-next-line no-unused-vars\n    convertBrainsToSeries() {\n      const series = [];\n      // eslint-disable-next-line no-unused-vars,no-return-assign\n      this.brains.forEach((element) => {\n        const x = element[0];\n        const y = element[2];\n        if (y > this.maxValue) {\n          this.maxValue = y;\n        }\n        series.push([x, y]);\n      });\n      return series;\n    },\n\n    generateDayWiseTimeSeries(baseval, count, yrange) {\n      let i = 0;\n      const series = [];\n      while (i < count) {\n        const x = baseval;\n        const y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n        // These are time and value\n        series.push([x, y]);\n        // eslint-disable-next-line no-param-reassign\n        baseval += 86400000;\n        i += 1;\n      }\n      return series;\n    },\n    getSessions() {\n      const path = 'http://localhost:5000/sessions';\n      axios.get(path)\n        .then((res) => {\n          // this.brains = res.data;\n          this.brains = res.data;\n          console.log('BRAINS', JSON.stringify(this.brains));\n          console.log('BRAIN 0: ', this.brains[0]);\n          this.updateChart();\n          // Update Chart?\n        })\n        .catch((error) => {\n          // eslint-disable-next-line\n          console.error(error);\n        });\n    },\n\n    updateChart() {\n      // const max = 90;\n      // const min = 20;\n      // eslint-disable-next-line max-len\n      // const newData = this.series[0].data.map(() => Math.floor(Math.random() * (max - min + 1)) + min)\n      this.series = [\n        {\n          name: 'Session Length (MS)',\n          data: this.convertBrainsToSeries(),\n        },\n      ];\n      this.chartOptions = {\n        chart: {\n          height: 400,\n          type: 'line',\n          zoom: {\n            type: 'xy',\n          },\n        },\n        annotations: {\n          yaxis: [{\n            y: this.targetTime * 1000,\n            borderColor: '#00E396',\n            label: {\n              borderColor: '#00E396',\n              style: {\n                color: '#fff',\n                background: '#00E396',\n              },\n              text: `Target:${this.targetTime}s`,\n            },\n          },\n          ],\n        },\n        dataLabels: {\n          enabled: true,\n        },\n        grid: {\n          xaxis: {\n            lines: {\n              show: true,\n            },\n          },\n          yaxis: {\n            lines: {\n              show: true,\n            },\n          },\n        },\n        xaxis: {\n          type: 'datetime',\n        },\n        yaxis: {\n          max: this.maxValue + 1,\n        },\n      };\n    },\n  },\n  created() {\n    this.getSessions();\n  },\n};\n</script>\n<style scoped>\n  button {\n    background: #26E6A4;\n    border: 0;\n    font-size: 16px;\n    padding: 10px;\n    margin-left: 28px;\n  }\n</style>\n"]}]}