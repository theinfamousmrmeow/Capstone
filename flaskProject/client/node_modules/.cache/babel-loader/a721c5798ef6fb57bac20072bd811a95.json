{"remainingRequest":"C:\\Capstone\\flaskProject\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Capstone\\flaskProject\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Capstone\\flaskProject\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Capstone\\flaskProject\\client\\src\\components\\Chart1.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Capstone\\flaskProject\\client\\src\\components\\Chart1.vue","mtime":1642558470265},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBWdWVBcGV4Q2hhcnRzIGZyb20gJ3Z1ZS1hcGV4Y2hhcnRzJzsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKdmFyIFdFQkFQUF9BRERSRVNTID0gcHJvY2Vzcy5lbnYuVlVFX0FQUF9XRUJBUFBfSVA7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQ2hhcnQnLAogIGNvbXBvbmVudHM6IHsKICAgIGFwZXhjaGFydHM6IFZ1ZUFwZXhDaGFydHMKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBicmFpbnM6IFswXSwKICAgICAgc2VyaWVzOiBbewogICAgICAgIG5hbWU6ICdURUFNIDEnLAogICAgICAgIGRhdGE6IHRoaXMuZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhuZXcgRGF0ZSgnMTEgRmViIDIwMTcgR01UJykuZ2V0VGltZSgpLCAyMCwgewogICAgICAgICAgbWluOiAxMCwKICAgICAgICAgIG1heDogNjAKICAgICAgICB9KQogICAgICB9LCB7CiAgICAgICAgbmFtZTogJ1RFQU0gMicsCiAgICAgICAgZGF0YTogdGhpcy5nZW5lcmF0ZURheVdpc2VUaW1lU2VyaWVzKG5ldyBEYXRlKCcxMSBGZWIgMjAxNyBHTVQnKS5nZXRUaW1lKCksIDIwLCB7CiAgICAgICAgICBtaW46IDEwLAogICAgICAgICAgbWF4OiA2MAogICAgICAgIH0pCiAgICAgIH1dLAogICAgICBjaGFydE9wdGlvbnM6IHsKICAgICAgICB0aXRsZTogewogICAgICAgICAgdGV4dDogJ0dlbmVyYXRlZCBCcmFpbiBGaXRuZXNzIE92ZXIgVGltZScKICAgICAgICB9LAogICAgICAgIGNoYXJ0OiB7CiAgICAgICAgICBoZWlnaHQ6IDQwMCwKICAgICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICAgIHpvb206IHsKICAgICAgICAgICAgdHlwZTogJ3h5JwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZGF0YUxhYmVsczogewogICAgICAgICAgZW5hYmxlZDogZmFsc2UKICAgICAgICB9LAogICAgICAgIGdyaWQ6IHsKICAgICAgICAgIHhheGlzOiB7CiAgICAgICAgICAgIGxpbmVzOiB7CiAgICAgICAgICAgICAgc2hvdzogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgeWF4aXM6IHsKICAgICAgICAgICAgbGluZXM6IHsKICAgICAgICAgICAgICBzaG93OiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHhheGlzOiB7CiAgICAgICAgICB0eXBlOiAnZGF0ZXRpbWUnCiAgICAgICAgfSwKICAgICAgICB5YXhpczogewogICAgICAgICAgbWF4OiAxMDAwCiAgICAgICAgfQogICAgICB9CiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzCiAgICBjb252ZXJ0QnJhaW5zVG9TZXJpZXM6IGZ1bmN0aW9uIGNvbnZlcnRCcmFpbnNUb1NlcmllcygpIHsKICAgICAgdmFyIHNlcmllcyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsbm8tcmV0dXJuLWFzc2lnbgoKICAgICAgdGhpcy5icmFpbnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICAgIHZhciB4ID0gbmV3IERhdGUoZWxlbWVudFsyXSkuZ2V0VGltZSgpOwogICAgICAgIHZhciB5ID0gZWxlbWVudFsxXTsKICAgICAgICBzZXJpZXMucHVzaChbeCwgeV0pOwogICAgICB9KTsKICAgICAgcmV0dXJuIHNlcmllczsKICAgIH0sCiAgICBnZW5lcmF0ZURheVdpc2VUaW1lU2VyaWVzOiBmdW5jdGlvbiBnZW5lcmF0ZURheVdpc2VUaW1lU2VyaWVzKGJhc2V2YWwsIGNvdW50LCB5cmFuZ2UpIHsKICAgICAgdmFyIGkgPSAwOwogICAgICB2YXIgc2VyaWVzID0gW107CgogICAgICB3aGlsZSAoaSA8IGNvdW50KSB7CiAgICAgICAgdmFyIHggPSBiYXNldmFsOwogICAgICAgIHZhciB5ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHlyYW5nZS5tYXggLSB5cmFuZ2UubWluICsgMSkpICsgeXJhbmdlLm1pbjsgLy8gVGhlc2UgYXJlIHRpbWUgYW5kIHZhbHVlCgogICAgICAgIHNlcmllcy5wdXNoKFt4LCB5XSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnbgoKICAgICAgICBiYXNldmFsICs9IDg2NDAwMDAwOwogICAgICAgIGkgKz0gMTsKICAgICAgfQoKICAgICAgcmV0dXJuIHNlcmllczsKICAgIH0sCiAgICBnZXRTZXNzaW9uczogZnVuY3Rpb24gZ2V0U2Vzc2lvbnMoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB2YXIgcGF0aCA9ICIiLmNvbmNhdChXRUJBUFBfQUREUkVTUywgIi9icmFpbnMiKTsKICAgICAgYXhpb3MuZ2V0KHBhdGgpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIC8vIHRoaXMuYnJhaW5zID0gcmVzLmRhdGE7CiAgICAgICAgX3RoaXMuYnJhaW5zID0gcmVzLmRhdGE7CiAgICAgICAgY29uc29sZS5sb2coJ0JSQUlOUycsIEpTT04uc3RyaW5naWZ5KF90aGlzLmJyYWlucykpOwogICAgICAgIGNvbnNvbGUubG9nKCdCUkFJTiAwOiAnLCBfdGhpcy5icmFpbnNbMF0pOwoKICAgICAgICBfdGhpcy51cGRhdGVDaGFydCgpOyAvLyBVcGRhdGUgQ2hhcnQ/CgogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsKICAgICAgfSk7CiAgICB9LAogICAgdXBkYXRlQ2hhcnQ6IGZ1bmN0aW9uIHVwZGF0ZUNoYXJ0KCkgewogICAgICAvLyBjb25zdCBtYXggPSA5MDsKICAgICAgLy8gY29uc3QgbWluID0gMjA7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuCiAgICAgIC8vIGNvbnN0IG5ld0RhdGEgPSB0aGlzLnNlcmllc1swXS5kYXRhLm1hcCgoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluKQogICAgICB0aGlzLnNlcmllcyA9IFt7CiAgICAgICAgbmFtZTogJ1RFQU0gQlJBSU5TJywKICAgICAgICBkYXRhOiB0aGlzLmNvbnZlcnRCcmFpbnNUb1NlcmllcygpCiAgICAgIH1dOyAvLyBUT0RPOiBGaW5kIGEgcHJldHRpZXIgd2F5IHRvIGRvIHRoaXMuCgogICAgICB2YXIgY2xvbmVTZXJpZXMgPSBbXTsKICAgICAgT2JqZWN0LmFzc2lnbihjbG9uZVNlcmllcywgdGhpcy5zZXJpZXMpOwogICAgICB0aGlzLnNlcmllcyA9IGNsb25lU2VyaWVzOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuZ2V0U2Vzc2lvbnMoKTsKICB9Cn07"},{"version":3,"sources":["Chart1.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"app\">\n     <apexcharts width=\"800\" type=\"line\" :options=\"chartOptions\" :series=\"series\"></apexcharts>\n    <div>\n      <button @click=\"updateChart\">Update!</button>\n  </div>\n  </div>\n\n</template>\n\n<script>\nimport VueApexCharts from 'vue-apexcharts';\nimport axios from 'axios';\n\nconst WEBAPP_ADDRESS = process.env.VUE_APP_WEBAPP_IP;\n\nexport default {\n  name: 'Chart',\n  components: {\n    apexcharts: VueApexCharts,\n  },\n  data() {\n    return {\n      brains: [0],\n      series: [{\n        name: 'TEAM 1',\n        data: this.generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n          min: 10,\n          max: 60,\n        }),\n      },\n      {\n        name: 'TEAM 2',\n        data: this.generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n          min: 10,\n          max: 60,\n        }),\n      },\n      ],\n      chartOptions: {\n\n        title: {\n          text: 'Generated Brain Fitness Over Time',\n        },\n\n        chart: {\n          height: 400,\n          type: 'line',\n          zoom: {\n            type: 'xy',\n          },\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        grid: {\n          xaxis: {\n            lines: {\n              show: true,\n            },\n          },\n          yaxis: {\n            lines: {\n              show: true,\n            },\n          },\n        },\n        xaxis: {\n          type: 'datetime',\n        },\n        yaxis: {\n          max: 1000,\n        },\n      },\n    };\n  },\n  methods: {\n\n    // eslint-disable-next-line no-unused-vars\n    convertBrainsToSeries() {\n      const series = [];\n      // eslint-disable-next-line no-unused-vars,no-return-assign\n      this.brains.forEach((element) => {\n        const x = new Date(element[2]).getTime();\n        const y = element[1];\n        series.push([x, y]);\n      });\n      return series;\n    },\n\n    generateDayWiseTimeSeries(baseval, count, yrange) {\n      let i = 0;\n      const series = [];\n      while (i < count) {\n        const x = baseval;\n        const y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n        // These are time and value\n        series.push([x, y]);\n        // eslint-disable-next-line no-param-reassign\n        baseval += 86400000;\n        i += 1;\n      }\n      return series;\n    },\n    getSessions() {\n      const path = `${WEBAPP_ADDRESS}/brains`;\n      axios.get(path)\n        .then((res) => {\n          // this.brains = res.data;\n          this.brains = res.data;\n          console.log('BRAINS', JSON.stringify(this.brains));\n          console.log('BRAIN 0: ', this.brains[0]);\n          this.updateChart();\n          // Update Chart?\n        })\n        .catch((error) => {\n          // eslint-disable-next-line\n          console.error(error);\n        });\n    },\n\n    updateChart() {\n      // const max = 90;\n      // const min = 20;\n      // eslint-disable-next-line max-len\n      // const newData = this.series[0].data.map(() => Math.floor(Math.random() * (max - min + 1)) + min)\n      this.series = [\n        {\n          name: 'TEAM BRAINS',\n          data: this.convertBrainsToSeries(),\n        },\n      ];\n      // TODO: Find a prettier way to do this.\n      const cloneSeries = [];\n      Object.assign(cloneSeries, this.series);\n      this.series = cloneSeries;\n    },\n  },\n  created() {\n    this.getSessions();\n  },\n};\n</script>\n<style scoped>\n  button {\n    background: #26E6A4;\n    border: 0;\n    font-size: 16px;\n    padding: 10px;\n    margin-left: 28px;\n  }\n</style>\n"],"sourceRoot":"src/components"}]}