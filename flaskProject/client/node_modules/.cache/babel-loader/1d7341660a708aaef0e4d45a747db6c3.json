{"remainingRequest":"C:\\Capstone\\flaskProject\\client\\node_modules\\babel-loader\\lib\\index.js!C:\\Capstone\\flaskProject\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Capstone\\flaskProject\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Capstone\\flaskProject\\client\\src\\components\\Chart2.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Capstone\\flaskProject\\client\\src\\components\\Chart2.vue","mtime":1642558446955},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Capstone\\flaskProject\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBWdWVBcGV4Q2hhcnRzIGZyb20gJ3Z1ZS1hcGV4Y2hhcnRzJzsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKdmFyIFdFQkFQUF9BRERSRVNTID0gcHJvY2Vzcy5lbnYuVlVFX0FQUF9XRUJBUFBfSVA7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQ2hhcnQyJywKICBjb21wb25lbnRzOiB7CiAgICBhcGV4Y2hhcnRzOiBWdWVBcGV4Q2hhcnRzCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgdGFyZ2V0VGltZTogNjAsCiAgICAgIG1heFZhbHVlOiAxMCwKICAgICAgYnJhaW5zOiBbMF0sCiAgICAgIHNlcmllczogW3sKICAgICAgICBuYW1lOiAnVEVBTSAxJywKICAgICAgICBkYXRhOiB0aGlzLmdlbmVyYXRlRGF5V2lzZVRpbWVTZXJpZXMobmV3IERhdGUoJzExIEZlYiAyMDE3IEdNVCcpLmdldFRpbWUoKSwgMjAsIHsKICAgICAgICAgIG1pbjogMTAsCiAgICAgICAgICBtYXg6IDYwCiAgICAgICAgfSkKICAgICAgfSwgewogICAgICAgIG5hbWU6ICdURUFNIDInLAogICAgICAgIGRhdGE6IHRoaXMuZ2VuZXJhdGVEYXlXaXNlVGltZVNlcmllcyhuZXcgRGF0ZSgnMTEgRmViIDIwMTcgR01UJykuZ2V0VGltZSgpLCAyMCwgewogICAgICAgICAgbWluOiAxMCwKICAgICAgICAgIG1heDogNjAKICAgICAgICB9KQogICAgICB9XSwKICAgICAgY2hhcnRPcHRpb25zOiB7CiAgICAgICAgY2hhcnQ6IHsKICAgICAgICAgIGhlaWdodDogNDAwLAogICAgICAgICAgdHlwZTogJ3NjYXR0ZXInLAogICAgICAgICAgem9vbTogewogICAgICAgICAgICB0eXBlOiAneHknCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBkYXRhTGFiZWxzOiB7CiAgICAgICAgICBlbmFibGVkOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgZ3JpZDogewogICAgICAgICAgeGF4aXM6IHsKICAgICAgICAgICAgbGluZXM6IHsKICAgICAgICAgICAgICBzaG93OiB0cnVlCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICB5YXhpczogewogICAgICAgICAgICBsaW5lczogewogICAgICAgICAgICAgIHNob3c6IHRydWUKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgeGF4aXM6IHsKICAgICAgICAgIHR5cGU6ICdkYXRldGltZScKICAgICAgICB9LAogICAgICAgIHlheGlzOiB7CiAgICAgICAgICBtYXg6IDEwMAogICAgICAgIH0KICAgICAgfQogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7fSwKICBtZXRob2RzOiB7CiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMKICAgIGNvbnZlcnRCcmFpbnNUb1NlcmllczogZnVuY3Rpb24gY29udmVydEJyYWluc1RvU2VyaWVzKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHNlcmllcyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMsbm8tcmV0dXJuLWFzc2lnbgoKICAgICAgdGhpcy5icmFpbnMuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkgewogICAgICAgIHZhciB4ID0gZWxlbWVudFswXTsKICAgICAgICB2YXIgeSA9IGVsZW1lbnRbMl07CgogICAgICAgIGlmICh5ID4gX3RoaXMubWF4VmFsdWUpIHsKICAgICAgICAgIF90aGlzLm1heFZhbHVlID0geTsKICAgICAgICB9CgogICAgICAgIHNlcmllcy5wdXNoKFt4LCB5XSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gc2VyaWVzOwogICAgfSwKICAgIGdlbmVyYXRlRGF5V2lzZVRpbWVTZXJpZXM6IGZ1bmN0aW9uIGdlbmVyYXRlRGF5V2lzZVRpbWVTZXJpZXMoYmFzZXZhbCwgY291bnQsIHlyYW5nZSkgewogICAgICB2YXIgaSA9IDA7CiAgICAgIHZhciBzZXJpZXMgPSBbXTsKCiAgICAgIHdoaWxlIChpIDwgY291bnQpIHsKICAgICAgICB2YXIgeCA9IGJhc2V2YWw7CiAgICAgICAgdmFyIHkgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoeXJhbmdlLm1heCAtIHlyYW5nZS5taW4gKyAxKSkgKyB5cmFuZ2UubWluOyAvLyBUaGVzZSBhcmUgdGltZSBhbmQgdmFsdWUKCiAgICAgICAgc2VyaWVzLnB1c2goW3gsIHldKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduCgogICAgICAgIGJhc2V2YWwgKz0gODY0MDAwMDA7CiAgICAgICAgaSArPSAxOwogICAgICB9CgogICAgICByZXR1cm4gc2VyaWVzOwogICAgfSwKICAgIGdldFNlc3Npb25zOiBmdW5jdGlvbiBnZXRTZXNzaW9ucygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB2YXIgcGF0aCA9ICIiLmNvbmNhdChXRUJBUFBfQUREUkVTUywgIi9zZXNzaW9ucyIpOwogICAgICBheGlvcy5nZXQocGF0aCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgLy8gdGhpcy5icmFpbnMgPSByZXMuZGF0YTsKICAgICAgICBfdGhpczIuYnJhaW5zID0gcmVzLmRhdGE7CiAgICAgICAgY29uc29sZS5sb2coJ0JSQUlOUycsIEpTT04uc3RyaW5naWZ5KF90aGlzMi5icmFpbnMpKTsKICAgICAgICBjb25zb2xlLmxvZygnQlJBSU4gMDogJywgX3RoaXMyLmJyYWluc1swXSk7CgogICAgICAgIF90aGlzMi51cGRhdGVDaGFydCgpOyAvLyBVcGRhdGUgQ2hhcnQ/CgogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUKICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTsKICAgICAgfSk7CiAgICB9LAogICAgdXBkYXRlQ2hhcnQ6IGZ1bmN0aW9uIHVwZGF0ZUNoYXJ0KCkgewogICAgICAvLyBjb25zdCBtYXggPSA5MDsKICAgICAgLy8gY29uc3QgbWluID0gMjA7CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuCiAgICAgIC8vIGNvbnN0IG5ld0RhdGEgPSB0aGlzLnNlcmllc1swXS5kYXRhLm1hcCgoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluICsgMSkpICsgbWluKQogICAgICB0aGlzLnNlcmllcyA9IFt7CiAgICAgICAgbmFtZTogJ1Nlc3Npb24gTGVuZ3RoIChNUyknLAogICAgICAgIGRhdGE6IHRoaXMuY29udmVydEJyYWluc1RvU2VyaWVzKCkKICAgICAgfV07CiAgICAgIHRoaXMuY2hhcnRPcHRpb25zID0gewogICAgICAgIHRpdGxlOiB7CiAgICAgICAgICB0ZXh0OiAnU2Vzc2lvbiBMZW5ndGggT3ZlciBUaW1lJwogICAgICAgIH0sCiAgICAgICAgY2hhcnQ6IHsKICAgICAgICAgIGhlaWdodDogNDAwLAogICAgICAgICAgdHlwZTogJ2xpbmUnLAogICAgICAgICAgem9vbTogewogICAgICAgICAgICB0eXBlOiAneHknCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBhbm5vdGF0aW9uczogewogICAgICAgICAgeWF4aXM6IFt7CiAgICAgICAgICAgIHk6IHRoaXMudGFyZ2V0VGltZSAqIDEwMDAsCiAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnIzAwRTM5NicsCiAgICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjMDBFMzk2JywKICAgICAgICAgICAgICBzdHlsZTogewogICAgICAgICAgICAgICAgY29sb3I6ICcjZmZmJywKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjMDBFMzk2JwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgdGV4dDogIlRhcmdldDoiLmNvbmNhdCh0aGlzLnRhcmdldFRpbWUsICJzIikKICAgICAgICAgICAgfQogICAgICAgICAgfV0KICAgICAgICB9LAogICAgICAgIGRhdGFMYWJlbHM6IHsKICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICBncmlkOiB7CiAgICAgICAgICB4YXhpczogewogICAgICAgICAgICBsaW5lczogewogICAgICAgICAgICAgIHNob3c6IHRydWUKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHlheGlzOiB7CiAgICAgICAgICAgIGxpbmVzOiB7CiAgICAgICAgICAgICAgc2hvdzogdHJ1ZQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB4YXhpczogewogICAgICAgICAgdHlwZTogJ2RhdGV0aW1lJwogICAgICAgIH0sCiAgICAgICAgeWF4aXM6IHsKICAgICAgICAgIG1heDogdGhpcy5tYXhWYWx1ZSArIDEKICAgICAgICB9CiAgICAgIH07IC8vIFRPRE86IEZpbmQgYSBwcmV0dGllciB3YXkgdG8gZG8gdGhpcy4KCiAgICAgIHZhciBjbG9uZVNlcmllcyA9IFtdOwogICAgICBPYmplY3QuYXNzaWduKGNsb25lU2VyaWVzLCB0aGlzLnNlcmllcyk7CiAgICAgIHRoaXMuc2VyaWVzID0gY2xvbmVTZXJpZXM7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5nZXRTZXNzaW9ucygpOwogIH0KfTs="},{"version":3,"sources":["Chart2.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"app\">\n     <apexcharts width=\"800\" type='line' :options=\"chartOptions\" :series=\"series\"></apexcharts>\n    <div>\n      <button @click=\"updateChart\">Update!</button>\n  </div>\n  </div>\n\n</template>\n\n<script>\nimport VueApexCharts from 'vue-apexcharts';\nimport axios from 'axios';\n\nconst WEBAPP_ADDRESS = process.env.VUE_APP_WEBAPP_IP;\n\nexport default {\n  name: 'Chart2',\n  components: {\n    apexcharts: VueApexCharts,\n  },\n  data() {\n    return {\n      targetTime: 60,\n      maxValue: 10,\n      brains: [0],\n      series: [{\n        name: 'TEAM 1',\n        data: this.generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n          min: 10,\n          max: 60,\n        }),\n      },\n      {\n        name: 'TEAM 2',\n        data: this.generateDayWiseTimeSeries(new Date('11 Feb 2017 GMT').getTime(), 20, {\n          min: 10,\n          max: 60,\n        }),\n      },\n      ],\n      chartOptions: {\n        chart: {\n          height: 400,\n          type: 'scatter',\n          zoom: {\n            type: 'xy',\n          },\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        grid: {\n          xaxis: {\n            lines: {\n              show: true,\n            },\n          },\n          yaxis: {\n            lines: {\n              show: true,\n            },\n          },\n        },\n        xaxis: {\n          type: 'datetime',\n        },\n        yaxis: {\n          max: 100,\n        },\n      },\n    };\n  },\n\n  computed: {\n\n  },\n\n  methods: {\n\n    // eslint-disable-next-line no-unused-vars\n    convertBrainsToSeries() {\n      const series = [];\n      // eslint-disable-next-line no-unused-vars,no-return-assign\n      this.brains.forEach((element) => {\n        const x = element[0];\n        const y = element[2];\n        if (y > this.maxValue) {\n          this.maxValue = y;\n        }\n        series.push([x, y]);\n      });\n      return series;\n    },\n\n    generateDayWiseTimeSeries(baseval, count, yrange) {\n      let i = 0;\n      const series = [];\n      while (i < count) {\n        const x = baseval;\n        const y = Math.floor(Math.random() * (yrange.max - yrange.min + 1)) + yrange.min;\n        // These are time and value\n        series.push([x, y]);\n        // eslint-disable-next-line no-param-reassign\n        baseval += 86400000;\n        i += 1;\n      }\n      return series;\n    },\n    getSessions() {\n      const path = `${WEBAPP_ADDRESS}/sessions`;\n      axios.get(path)\n        .then((res) => {\n          // this.brains = res.data;\n          this.brains = res.data;\n          console.log('BRAINS', JSON.stringify(this.brains));\n          console.log('BRAIN 0: ', this.brains[0]);\n          this.updateChart();\n          // Update Chart?\n        })\n        .catch((error) => {\n          // eslint-disable-next-line\n          console.error(error);\n        });\n    },\n\n    updateChart() {\n      // const max = 90;\n      // const min = 20;\n      // eslint-disable-next-line max-len\n      // const newData = this.series[0].data.map(() => Math.floor(Math.random() * (max - min + 1)) + min)\n      this.series = [\n        {\n          name: 'Session Length (MS)',\n          data: this.convertBrainsToSeries(),\n        },\n      ];\n      this.chartOptions = {\n        title: {\n          text: 'Session Length Over Time',\n        },\n        chart: {\n          height: 400,\n          type: 'line',\n          zoom: {\n            type: 'xy',\n          },\n        },\n        annotations: {\n          yaxis: [{\n            y: this.targetTime * 1000,\n            borderColor: '#00E396',\n            label: {\n              borderColor: '#00E396',\n              style: {\n                color: '#fff',\n                background: '#00E396',\n              },\n              text: `Target:${this.targetTime}s`,\n            },\n          },\n          ],\n        },\n        dataLabels: {\n          enabled: false,\n        },\n        grid: {\n          xaxis: {\n            lines: {\n              show: true,\n            },\n          },\n          yaxis: {\n            lines: {\n              show: true,\n            },\n          },\n        },\n        xaxis: {\n          type: 'datetime',\n        },\n        yaxis: {\n          max: this.maxValue + 1,\n        },\n      };\n      // TODO: Find a prettier way to do this.\n      const cloneSeries = [];\n      Object.assign(cloneSeries, this.series);\n      this.series = cloneSeries;\n    },\n  },\n  created() {\n    this.getSessions();\n  },\n};\n</script>\n<style scoped>\n  button {\n    background: #26E6A4;\n    border: 0;\n    font-size: 16px;\n    padding: 10px;\n    margin-left: 28px;\n  }\n</style>\n"],"sourceRoot":"src/components"}]}